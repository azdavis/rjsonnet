Root = Expr

Expr =
  ExprHole
| ExprNull
| ExprTrue
| ExprFalse
| ExprSelf
| ExprSuper
| ExprDollar
| ExprString
| ExprNumber
| ExprId
| ExprParen
| ExprObject
| ExprArray
| ExprFieldGet
| ExprSubscript
| ExprCall
| ExprLocal
| ExprIf
| ExprBinaryOp
| ExprUnaryOp
| ExprImplicitObjectPlus
| ExprFunction
| ExprAssert
| ExprImport
| ExprError
| ExprTailstrict

// not real exprs
ExprHole = '...'

ExprNull = 'null'
ExprTrue = 'true'
ExprFalse = 'false'
ExprSelf = 'self'
// `super` is only allowed to occur with a field access
ExprSuper = 'super'
ExprDollar = '$'
ExprString = String
ExprNumber = 'Number'
ExprId = 'Id'
ExprParen = '(' Expr ')'
// make Object separate from ExprObject so that the rule ExprImplicitObjectPlus doesn't get
// confused.
ExprObject = Object
Object = '{' Member* CompSpec* '}'
// array comprehension is rearranged
ExprArray = '[' ExprComma* CompSpec* ']'
ExprFieldGet = Expr '.' 'Id'
ExprSubscript = on:Expr '[' idx_a:Expr? colon_a:':'? idx_b:Expr? colon_b:':'? idx_c:Expr? ']'
ExprCall = Expr '(' Arg* ')'
ExprLocal = 'local' BindComma* ';' Expr
ExprIf = 'if' cond:Expr 'then' yes:Expr ElseExpr?
ExprBinaryOp = lhs:Expr BinaryOp rhs:Expr
ExprUnaryOp = UnaryOp Expr
// if we defined this rule as 'Expr ExprObject', the generated code might get confused on which
// ExprObject we mean if the lhs Expr is also an ExprObject.
ExprImplicitObjectPlus = Expr Object
ExprFunction = 'function' ParenParams Expr
ExprAssert = Assert ';' Expr
ExprImport = Import String
ExprError = 'error' Expr
ExprTailstrict = Expr 'tailstrict'

Member = MemberKind ','?
MemberKind = ObjectLocal | Assert | Field

// slightly rearranged from the spec
Field = FieldName FieldExtra? Visibility Expr
FieldExtra = FieldPlus | ParenParams
FieldPlus = '+'

// called 'hidden' in the spec
Visibility = ':' | '::' | ':::'

ObjectLocal = 'local' Bind

// in the spec, the * is built-in to this itself. in the ungrammar, we simply add the * for every
// usage.
CompSpec = ForSpec | IfSpec

ForSpec = 'for' 'Id' 'in' Expr

IfSpec = 'if' Expr

FieldName = FieldNameId | FieldNameString | FieldNameExpr
FieldNameId = 'Id'
FieldNameString = String
FieldNameExpr = '[' Expr ']'

Assert = 'assert' Expr ColonExpr?

Bind = 'Id' ParenParams? '=' Expr
BindComma = Bind ','?

Arg = IdEq? Expr ','?

ParenParams = '(' Param* ')'
Param = 'Id' EqExpr? ','?

BinaryOp =
  '*' | '/' | '%' | '+' | '-' | '<<' | '>>' | '<' | '<='
| '>' | '>=' | '==' | '!=' | 'in' | '&' | '^' | '|' | '&&' | '||'

UnaryOp = '-' | '+' | '!' | '~'

// helpers
IdEq = 'Id' '='
EqExpr = '=' Expr
ExprComma = Expr ','?
ColonExpr = ':' Expr
ElseExpr = 'else' Expr
Import = 'import' | 'importstr' | 'importbin'
String =
  'DoubleQuotedString'
| 'SingleQuotedString'
| 'DoubleQuotedVerbatimString'
| 'SingleQuotedVerbatimString'
| 'TextBlock'

// not used in any expressions
MergeConflictMarkerUNUSED = 'MergeConflictMarker'
